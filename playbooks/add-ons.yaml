- hosts: master
  vars_files:
    - cns_values.yaml
  tasks:
   - name: Install Local Path Provisoner on NVIDIA Cloud Native Stack
     shell: kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v{{ local_path_provisioner }}/deploy/local-path-storage.yaml
     when: storage == true

   - name: Copy files
     when: monitoring == true
     copy:
       src: "{{ item }}"
       dest: "{{ ansible_user_dir }}/"
     with_fileglob:
       - "{{lookup('pipe', 'pwd')}}/files/grafana-dashboard.yaml"
       - "{{lookup('pipe', 'pwd')}}/files/kube-prometheus-stack.values"
       - "{{lookup('pipe', 'pwd')}}/files/grafana-patch.json"

   - name: Install Kserve on Kubernetes
     when: kserve == true
     shell: curl -s "https://raw.githubusercontent.com/kserve/kserve/release-0.13/hack/quick_install.sh" | bash > /tmp/kserve-install.log
     failed_when: false
     ignore_errors: true

   - name: Kserve Status check
     shell: cat /tmp/kserve-install.log | tail -1f | cut -d " " -f2-
     register: kserve_check

   - name: Install Kserve on Kubernetes
     when: kserve == true and kserve_check.stdout != 'Successfully installed KServe'
     shell: curl -s "https://raw.githubusercontent.com/kserve/kserve/release-0.13/hack/quick_install.sh" | bash > /tmp/kserve-install.log
     failed_when: false
     ignore_errors: true

   - name: Install Prometheus Stack on NVIDIA Cloud Native Stack
     ignore_errors: true
     failed_when: false
     shell: "{{ item }}"
     when: monitoring == true
     with_items:
       - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
       - helm repo update
       - helm install prometheus-community/kube-prometheus-stack --create-namespace --namespace monitoring --generate-name --values  {{ ansible_user_dir }}/kube-prometheus-stack.values
       - kubectl patch svc $(kubectl get svc -n monitoring | grep grafana | awk '{print $1}') --type='json' -p '[{"op":"replace","path":"/spec/type","value":"NodePort"},{"op":"replace","path":"/spec/ports/0/nodePort","value":32222}]' -n monitoring
       - kubectl apply -f  {{ ansible_user_dir }}/grafana-dashboard.yaml -n monitoring
       - kubectl patch deployment $(kubectl get deployments -n monitoring | grep grafana | awk '{print $1}')  -n monitoring  --patch "$(cat {{ ansible_user_dir }}/grafana-patch.json)"
       - kubectl patch clusterpolicy/cluster-policy --type='json' -p='[{"op":"replace", "path":"/spec/dcgmExporter/serviceMonitor/enabled", "value":true}]'
       - kubectl delete pod $(kubectl get pods -n nvidia-gpu-operator | grep dcgm | awk '{print $1}') -n nvidia-gpu-operator --force