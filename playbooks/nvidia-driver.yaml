- hosts: all
  become: true
  vars_files:
    - cns_values.yaml
  become_method: sudo
  tasks:
    - name: Update Containerd Runtime for NVIDIA Cloud Native Stack
      become: true
      block:
        - name: Create /etc/containerd
          file:
            path: /etc/containerd
            state: directory

        - name: Write defaults to config.toml
          copy:
            src: "{{lookup('pipe', 'pwd')}}/files/config.toml"
            dest: /etc/containerd/config.toml
            mode: 0664

        - name: Enable systemd cgroups
          shell: sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

        - name: restart containerd
          service:
            name: containerd
            state: restarted
            daemon_reload: yes
      when: "cns_docker == true and cns_nvidia_driver == true and microk8s == false"

    - name: Check NVIDIA Driver Modules are loaded
      shell: "lsmod | grep -i nvidia"
      register: nvidia_mod
      no_log: True
      failed_when: false

    - name: Check NVIDIA SMI loaded
      shell: "nvidia-smi"
      register: nvidia_smi
      no_log: True
      failed_when: false

    - name: Trim the GPU Driver Version
      shell: "echo {{ gpu_driver_version }} | awk -F'.' '{print $1}'"
      register: dversion

    - set_fact:
        driver_version: "{{ dversion.stdout }}"

    - name: unload NVIDIA
      when: nvidia_smi.rc == 0
      shell: /usr/bin/nvidia-uninstall --silent; kill -9 $(lsof /dev/nvidia* | awk '{print $2}' | grep -v PID | uniq); rmmod nvidia_uvm; rmmod nvidia_drm; rmmod nvidia_modeset; rmmod nvidia
      become: true
      failed_when: false

    - name: NVIDIA Driver Clean Up
      when:  nvidia_mod.rc >= 1 and ansible_distribution == 'Ubuntu' or nvidia_smi.rc == 0 and ansible_distribution == 'Ubuntu'
      block:
        - name: Remove Ubuntu unattended upgrades to prevent apt lock
          ansible.builtin.apt:
            name: unattended-upgrades
            state: absent
            purge: yes
          register: apt_cleanup
          retries: 10
          until: apt_cleanup is success

        - name: Remove OLD Apt Repository
          apt_repository:
            repo: ppa:graphics-drivers/ppa
            state: absent
          register: ppa_clean
          retries: 10
          until: ppa_clean is success

        - name: Remove NVIDIA packages
          apt:
            name:
            - "*cuda*"
            - "libnvidia-cfg1-*"
            - "libnvidia-common-*"
            - "libnvidia-compute-*"
            - "libnvidia-decode-*"
            - "libnvidia-encode-*"
            - "libnvidia-extra-*"
            - "libnvidia-fbc1-*"
            - "libnvidia-gl-*"
            - "nvidia-compute-utils-*"
            - "nvidia-dkms-*"
            - "nvidia-driver-*"
            - "nvidia-kernel-common-*"
            - "nvidia-kernel-source-*"
            - "nvidia-modprobe"
            - "nvidia-prime"
            - "nvidia-settings"
            - "nvidia-utils-*"
            - "screen-resolution-extra"
            - "xserver-xorg-video-nvidia-*"
            - "gdm*"
            - "xserver-xorg-*"
            autoremove: yes
            purge: yes
            state: absent
          register: nvidia_cleanup
          retries: 10
          until: nvidia_cleanup is success

        - name: Remove old keyring
          shell:
            cmd: "apt-key del 7fa2af80"

    - name:  ensure we have kernel-headers installed for the current kernel on RHEL
      when:  "cns_version >= 10.0 and ansible_distribution == 'RedHat'"
      block:
        - name: attempt to install kernel support packages for current version
          yum:
            name:
              - "kernel-headers-{{ ansible_kernel }}"
              - "kernel-tools-{{ ansible_kernel }}"
              - "kernel-tools-libs-{{ ansible_kernel }}"
              - "kernel-devel-{{ ansible_kernel }}"
              - "kernel-debug-devel-{{ ansible_kernel }}"
            state: present
        - name: update the kernel to latest version so we have a supported version
          yum:
            name:
              - "kernel"
              - "kernel-headers"
              - "kernel-tools"
              - "kernel-tools-libs"
              - "kernel-devel"
              - "kernel-debug-devel"
            state: latest

    - name: Update Ubuntu System
      become: true
      when:  "cns_version >= 6.3 and ansible_distribution == 'Ubuntu'"
      ignore_errors: true
      block:
        - name: Force an apt update
          apt:
            update_cache: true
          changed_when: false
          register: update
          retries: 10
          until: update is success

        - name: Ensure kmod is installed
          apt:
            name: "kmod"
            state: "present"
          register: kmod_check
          retries: 10
          until: kmod_check is success

    - name: Install NVIDIA TRD Driver
      become: true
      when:  "cns_version >= 6.3 and ansible_distribution == 'Ubuntu' and use_open_kernel_module == true"
      ignore_errors: true
      block:
        - name: Temporarily adjust account password policy to allow for successful NVIDIA driver install
          shell: chage -d 1 root

        - name: Install driver packages
          shell: "BASE_URL=https://us.download.nvidia.com/tesla; curl -fSsl -O $BASE_URL/{{ gpu_driver_version }}/NVIDIA-Linux-{{ ansible_architecture }}-{{ gpu_driver_version }}.run; chmod +x ./NVIDIA-Linux-{{ ansible_architecture }}-{{ gpu_driver_version }}.run; sh ./NVIDIA-Linux-{{ ansible_architecture }}-{{ gpu_driver_version }}.run -m=kernel-open --silent"

    - name: Install NVIDIA TRD Driver
      become: true
      when:  "cns_version >= 6.3 and use_open_kernel_module == false"
      ignore_errors: true
      block:
        - name: Temporarily adjust account password policy to allow for successful NVIDIA driver install
          shell: chage -d 1 root

        - name: Install driver packages
          shell: "BASE_URL=https://us.download.nvidia.com/tesla; curl -fSsl -O $BASE_URL/{{ gpu_driver_version }}/NVIDIA-Linux-{{ ansible_architecture }}-{{ gpu_driver_version }}.run; chmod +x ./NVIDIA-Linux-{{ ansible_architecture }}-{{ gpu_driver_version }}.run; sh ./NVIDIA-Linux-{{ ansible_architecture }}-{{ gpu_driver_version }}.run --silent"          