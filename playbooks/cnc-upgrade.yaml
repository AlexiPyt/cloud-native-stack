- hosts: master
  vars_files:
    - cnc_values.yaml
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
  tasks:
   - set_fact: 
       cnc_docker: "{{ cnc_docker }}"
       cnc_nvidia_driver: "{{ cnc_nvidia_driver }}"
       cnc_validation: "{{ cnc_validation }}"

   - name: Get Nvidia Tegra Release
     shell: uname -r | awk -F'-' '{print $2}'
     register: release

   - set_fact:
       release: "{{ release.stdout }}"

   - name: Check OS Support x86/ARM systems
     shell: "echo 'Not a Valid Installation please use Ubuntu to 20.04 and retry'"
     when: cnc_version <= 6.4
     failed_when: "cnc_version <= 6.4 and ansible_distribution_major_version >= '22' and release != 'tegra'"

   - name: Check OS Support x86/ARM systems
     shell: "echo 'Not a Valid Installation please use Ubuntu to 22.04 and retry'"
     when: cnc_version >= 7.0
     failed_when: "cnc_version >= 7.0 and ansible_distribution_major_version <= '20' and release != 'tegra'"

   - name: Validate whether Kubernetes cluster installed
     shell: kubectl cluster-info
     register: k8sup
     no_log: True
     failed_when: false

   - name: Check Current Running Cloud Native Stack Version
     shell: kubectl version --short=true --client=false | grep -i server | awk '{print $NF}'
     register: k8sversion

   - when: "k8sversion.stdout == 'v1.25.4'"
     debug:
       msg: "Current Cloud Native Stack Version 8.1"

   - when: "k8sversion.stdout == 'v1.25.2'"
     debug:
       msg: "Current Cloud Native Stack Version 8.0 "

   - when: "k8sversion.stdout == 'v1.24.8'"
     debug:
       msg: "Current Cloud Native Stack Version 7.2"

   - when: "k8sversion.stdout == 'v1.24.6'"
     debug:
       msg: "Current Cloud Native Stack Version 7.1 "

   - when: "k8sversion.stdout == 'v1.24.2'"
     debug:
       msg: "Current Cloud Native Stack Version 7.0 "

   - when: "k8sversion.stdout == 'v1.23.14'"
     debug:
       msg: "Current Cloud Native Stack Version 6.4"

   - when: "k8sversion.stdout == 'v1.23.12'"
     debug:
       msg: "Current Cloud Native Stack Version 6.3"

   - when: "k8sversion.stdout == 'v1.23.8'"
     debug:
       msg: "Current Cloud Native Stack Version 6.2"

   - when: "k8sversion.stdout == 'v1.23.5'"
     debug:
       msg: "Current Cloud Native Stack Version 6.1"

   - when: "k8sversion.stdout == 'v1.23.2'"
     debug:
       msg: "Current Cloud Native Stack Version 6.0"

   - when: "k8sversion.stdout == 'v1.22.5'"
     debug:
       msg: "Current Cloud Native Stack Version 5.2"

   - name: Create Cloud Native Stack cnc_version.yaml
     when: "k8sversion.stdout == 'v1.22.5'"
     copy:
       dest: "/tmp/cnc_version.yaml"
       content: |
         cnc_version: 6.0

   - name: Create Cloud Native Stack cnc_version.yaml
     when: "k8sversion.stdout == 'v1.23.2'"
     copy:
       dest: "/tmp/cnc_version.yaml"
       content: |
         cnc_version: 6.1

   - name: Create Cloud Native Stack cnc_version.yaml
     when: "k8sversion.stdout == 'v1.23.5'"
     copy:
       dest: "/tmp/cnc_version.yaml"
       content: |
         cnc_version: 6.2

   - name: Create Cloud Native Stack cnc_version.yaml
     when: "k8sversion.stdout == 'v1.23.12'"
     copy:
       dest: "/tmp/cnc_version.yaml"
       content: |
         cnc_version: 6.4

   - name: Create Cloud Native Stack cnc_version.yaml
     when: "k8sversion.stdout == 'v1.23.8'"
     copy:
       dest: "/tmp/cnc_version.yaml"
       content: |
         cnc_version: 6.3

   - name: Create Cloud Native Stack cnc_version.yaml
     when: "k8sversion.stdout == 'v1.24.2'"
     copy:
       dest: "/tmp/cnc_version.yaml"
       content: |
         cnc_version: 7.1

   - name: Create Cloud Native Stack cnc_version.yaml
     when: "k8sversion.stdout == 'v1.24.6'"
     copy:
       dest: "/tmp/cnc_version.yaml"
       content: |
         cnc_version: 7.2

   - name: Create Cloud Native Stack cnc_version.yaml
     when: "k8sversion.stdout == 'v1.24.8'"
     copy:
       dest: "/tmp/cnc_version.yaml"
       content: |
         cnc_version: 8.0

   - name: Create Cloud Native Stack cnc_version.yaml
     when: "k8sversion.stdout == 'v1.25.2'"
     copy:
       dest: "/tmp/cnc_version.yaml"
       content: |
         cnc_version: 8.1

   - name: Fetch cnc_version.yaml
     ansible.builtin.fetch:
       src: "/tmp/cnc_version.yaml"
       dest: "{{lookup('pipe', 'pwd')}}/cnc_version.yaml"
       flat: yes

   - name: Update the cnc version in cnc_values.yaml
     shell: |
       version=$(cat {{lookup('pipe', 'pwd')}}/cnc_version.yaml | awk -F':' '{print $2}' | head -n1 | tr -d ' ' | tr -d '\n\r');  driver_version=$(cat {{lookup('pipe', 'pwd')}}/cnc_values_$version.yaml | grep driver_version | awk -F':' '{print $2}' | head -n1 | tr -d ' ' | tr -d '\n\r')
       cp -r {{lookup('pipe', 'pwd')}}/cnc_values_$version.yaml {{lookup('pipe', 'pwd')}}/cnc_values.yaml
#       sed -i "s/cnc_version: .*/cnc_version: $version/g; s/gpu_driver_version: .*/gpu_driver_version: $driver_version/g" {{lookup('pipe', 'pwd')}}/cnc_values.yaml

   - name: Update the cnc_values
     when: cnc_docker == true and cnc_nvidia_driver == true
     replace:
       path: "{{lookup('pipe', 'pwd')}}/cnc_values.yaml"
       regexp: '{{ item.regex }}'
       replace: '{{ item.replace }}'
     with_items:
       - { regex: 'cnc_docker: no', replace: 'cnc_docker: yes' }
       - { regex: 'cnc_nvidia_driver: no', replace: 'cnc_nvidia_driver: yes' }

- import_playbook: prerequisites.yaml
  when: "release != 'tegra'"

- import_playbook: nvidia-driver-upgrade.yaml
  when: "release != 'tegra' and cnc_nvidia_driver == true"

- import_playbook: cnc-jetson-upgrade.yaml
  when: "release == 'tegra' and cnc_nvidia_driver == false "

- hosts: master
  vars_files:
    - cnc_values.yaml
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
  tasks:
   - name: Validate whether Kubernetes cluster installed
     shell: kubectl cluster-info
     register: k8sup
     no_log: True
     failed_when: false

   - name: Check Current Running Cloud Native Stack Version
     shell: kubectl version --short=true --client=false | grep -i server | awk '{print $NF}'
     register: k8sversion

   - name: Upgrade the Cloud Native Stack from 8.0 to 8.1
     shell: kubeadm upgrade apply v1.25.4 --force
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.25.2'"
     become: true

   - name: Upgrade the Cloud Native Stack from 7.2 to 8.0
     shell: kubeadm upgrade apply v1.25.2 --force
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.24.8'"
     become: true

   - name: Upgrade the Cloud Native Stack from 7.1 to 7.2
     shell: kubeadm upgrade apply v1.24.8 --force
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.24.6'"
     become: true

   - name: Upgrade the Cloud Native Stack from 7.0 to 7.1
     shell: kubeadm upgrade apply v1.24.6 --force
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.24.2'"
     become: true

   - name: Upgrade the Cloud Native Stack from 6.3 to 6.4
     shell: kubeadm upgrade apply v1.23.14 --force
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.23.12'"
     become: true

   - name: Upgrade the Cloud Native Stack from 6.2 to 6.3
     shell: kubeadm upgrade apply v1.23.12 --force
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.23.8'"
     become: true

   - name: Upgrade the Cloud Native Stack from 6.1 to 6.2
     shell: kubeadm upgrade apply v1.23.8 --force
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.23.5'"
     become: true

   - name: Upgrade the Cloud Native Stack from 6.0 to 6.1
     shell: kubeadm upgrade apply v1.23.5 --force
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.23.2'"
     become: true

   - name: Upgrade the Cloud Native Stack from 5.2 to 6.0
     shell: kubeadm upgrade apply v1.23.5 --force
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.23.2'"
     become: true

   - name: Install networking plugin to kubernetes cluster on NVIDIA Cloud Native Stack 6.4 or 7.2 or 8.1
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.23.12' and release != 'tegra' or 'running' in k8sup.stdout and k8sversion.stdout == 'v1.24.6' and release != 'tegra' or 'running' in k8sup.stdout and k8sversion.stdout == 'v1.25.2' and release != 'tegra'"
     command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.5/manifests/calico.yaml

   - name: Install networking plugin to kubernetes cluster on NVIDIA Cloud Native Stack 7.1 or 8.0
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.24.2' and release != 'tegra' or 'running' in k8sup.stdout and k8sversion.stdout == 'v1.24.6' and release != 'tegra'"
     command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/calico.yaml

   - name: Install networking plugin to kubernetes cluster on NVIDIA Cloud Native Stack 6.3
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.23.8' and release != 'tegra'"
     command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/calico.yaml

   - name: Install networking plugin to kubernetes cluster on NVIDIA Cloud Native Stack 6.2
     when: "'running' in k8sup.stdout and k8sversion.stdout == 'v1.23.5' and release != 'tegra'"
     command: kubectl apply -f https://projectcalico.docs.tigera.io/archive/v3.21/manifests/calico.yaml

   - name: Update Network plugin for Calico on NVIDIA Cloud Native Stack > 3.1
     when: "'running' in k8sup.stdout and release != 'tegra'"
     shell: "sleep 5; kubectl set env daemonset/calico-node -n kube-system IP_AUTODETECTION_METHOD=interface=ens*,eth*,enc*,bond*,enp*,eno*"

   - name: Install networking plugin to kubernetes cluster on NVIDIA Cloud Native Stack
     when: "k8sversion.stdout == 'v1.23.8' and release == 'tegra' or k8sversion.stdout == 'v1.23.5' and release == 'tegra'"
     command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.19.2/Documentation/kube-flannel.yml

   - name: Install networking plugin to kubernetes cluster on NVIDIA Cloud Native Stack
     when: "k8sversion.stdout == 'v1.23.12' and release == 'tegra' or k8sversion.stdout == 'v1.24.2' and release == 'tegra' or k8sversion.stdout == 'v1.25.2' and release == 'tegra'"
     command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.20.0/Documentation/kube-flannel.yml

- import_playbook: operators-upgrade.yaml
  when: "release != 'tegra' and cnc_nvidia_driver == false "

- hosts: all
  vars_files:
    - cnc_values.yaml
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
  tasks:
   - set_fact: 
       cnc_docker: "{{ cnc_docker }}"
       cnc_nvidia_driver: "{{ cnc_nvidia_driver }}"

   - name: Reboot the system
     become: true
     when:  cnc_docker == true and cnc_nvidia_driver == true
     reboot:
       reboot_timeout: 900