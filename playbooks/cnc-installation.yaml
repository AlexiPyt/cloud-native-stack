- hosts: all
  gather_facts: yes
  vars_files:
    - cnc_values.yaml
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
  tasks:
    - set_fact: 
        cnc_docker: "{{ cnc_docker }}"
        cnc_nvidia_driver: "{{ cnc_nvidia_driver }}"
        cnc_version: "{{ cnc_version }}"
        cnc_validation: "{{ cnc_validation }}"

    - name: Checking Nouveau is disabled
      become: true
      command: lsmod | grep nouveau
      register: nouveau_result
      failed_when: false

    - name: unload nouveau
      when: nouveau_result.rc != 0
      become: true
      modprobe:
        name: nouveau
        state: absent
      ignore_errors: true

    - name: blacklist nouveau
      when: nouveau_result.rc != 0
      become: true
      copy:
        dest: "/etc/modprobe.d/blacklist-nouveau.conf"
        owner: "root"
        group: "root"
        mode: "0644"
        content: |
          blacklist nouveau
          options nouveau modeset=0
      notify:
      - update-initramfs

    - name: Get URL
      shell: "echo {{ k8s_apt_key }} | awk -F '//' '{print $2}' | awk -F'/' '{print $1}'"
      register: url

    - name: Test Internet Connection
      register: connection
      no_log: true
      failed_when: false
      ignore_errors: true
      uri:
        url: https://{{ url.stdout }}
        timeout: 5

    - name: Report Internet Connection status
      failed_when: "connection.status == -1"
      debug:
        msg: "Internet Connection status {{ connection.status }}"

    - name: Install Internet Speed dependencies
      when: connection.status != '-1'
      become: true
      apt:
        name: ['speedtest-cli']
        state: present
        update_cache: yes

    - name: Check Internet Speed
      ignore_errors: true
      failed_when: false
      shell: speedtest-cli --secure --simple
      register: speed

    - name: Report Valid Internet Speed
      shell: echo {{ speed.stdout_lines[1] }} | awk '{print $3}'
      register: speedtest
      ignore_errors: true
      failed_when: "'Kbit/s' in speedtest.stdout"

    - name: Check DNS Configuration
      shell: "dig {{ url.stdout }} +cmd +noall +answer"
      register: dns
      failed_when: "dns.stdout | length < 0"

    - name: Check K8s Repo access
      register: k8s_repo
      failed_when: "k8s_repo.status != 200"
      uri:
        url: https://{{ url.stdout }}
        timeout: 5

    - name: Install secure boot dependencies
      become: true
      apt:
        name: ['mokutil']
        state: present
        update_cache: yes

    - name: check secure boot
      shell: mokutil --sb-state | awk '{print $2}'
      register: secure_boot
      failed_when: "'enabled' in secure_boot.stdout"
      ignore_errors: true

    - name: check enough storage
      shell: df --block-size 1g / --output=avail | tail -1 | sed "s/ //g"
      register: size
      failed_when: " size.stdout | int <= 40 and ansible_architecture == 'x86_64'"

    - name: Clean up kube config
      become: true
      file:
        path: /root/.kube
        state: absent

    - name: Get Nvidia Tegra Release
      shell: uname -r | awk -F'-' '{print $2}'
      register: release

    - set_fact:
       release: "{{ release.stdout }}"

#    - name: Add DHCP Mac to netplan 
#      become: true 
#      args: 
#        warn: false 
#      shell: 'sudo sed -ie "/dhcp4: .*/a\      dhcp-identifier: mac" /etc/netplan/*' 
 
 #   - name: Apply DHCP mac to NetPlan 
 #     become: true 
 #     shell: netplan apply 

  handlers:
    - name: update-initramfs
      become: true
      command: update-initramfs -u
      when: ansible_os_family == "Debian" and nouveau_result.rc != 0

- when: "release == 'tegra'"
  import_playbook: cnc-jetson.yaml
  name: Install Cloud Native Stack on Jetson
  
- import_playbook: nvidia-driver.yaml
  when: "cnc_docker == true and cnc_nvidia_driver == true and release != 'tegra'"

- when: "cnc_version <= 4.1 and cnc_docker != true and ansible_architecture == 'x86_64' and release != 'tegra'"
  import_playbook: older_versions/prerequisites.yaml

- when: "cnc_version <= 4.1 and cnc_docker != true and ansible_architecture == 'x86_64' and release != 'tegra'"
  import_playbook: older_versions/cnc-installation.yaml

- when: "cnc_version > 4.1 and release != 'tegra'"
  import_playbook: prerequisites.yaml

- when: "cnc_version > 4.1 and release != 'tegra'"
  import_playbook: k8s-install.yaml

- when: "cnc_docker == true and release != 'tegra'"
  import_playbook: cnc-pre-nvidia-driver.yaml

- when: "cnc_version > 4.1 and cnc_docker != true and release != 'tegra'"
  import_playbook: operators-install.yaml

- hosts: all
  gather_facts: yes
  vars_files:
    - cnc_values.yaml
  tasks:

    - name: Waiting for Cluster to up and running
      args:
        executable: /bin/bash
      shell: |
        sleep 240
        state=$(kubectl get pods -n nvidia-gpu-operator | egrep -v 'Running|Completed|NAME' | wc -l)
        while [ $state != 0 ]
          do
            sleep 10
            state=$(kubectl get pods -n nvidia-gpu-operator | egrep -v 'Running|Completed|NAME' | wc -l)
          done
      register: status
      when: "cnc_version > 4.1 and cnc_validation == true and ansible_architecture == 'x86_64'"

- when: "cnc_version > 4.1 and cnc_validation == true and release != 'tegra'"
  import_playbook: cnc-validation.yaml
