- hosts: all
  gather_facts: yes
  vars_files:
    - egx_values.yaml
  tasks:
   - name: Validate whether Kubernetes cluster installed
     shell: kubectl cluster-info
     register: k8sup
     no_log: True
     failed_when: false

   - name: Checking Nouveau is disabled
     become: true
     command: lsmod | grep nouveau
     register: nouveau_result
     failed_when: false

   - name: unload nouveau
     when: nouveau_result.rc != 0
     become: true
     modprobe:
       name: nouveau
       state: absent
     ignore_errors: true

   - name: blacklist nouveau
     when: nouveau_result.rc != 0
     become: true
     copy:
      dest: "/etc/modprobe.d/blacklist-nouveau.conf"
      owner: "root"
      group: "root"
      mode: "0644"
      content: |
        blacklist nouveau
        options nouveau modeset=0
     notify:
     - update-initramfs

   - name: Add an Kubernetes apt signing key for Ubuntu
     become: true
     when: "ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
     apt_key:
       url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
       state: present

   - name: Adding Kubernetes apt repository for Ubuntu
     become: true
     when: "ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
     apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes

   - name: Install kubernetes components for Ubuntu on EGX Stack 1.2 or 1.3
     become: true
     when: "egx_version == 1.2 or egx_version == 1.3 and ansible_distribution == 'Ubuntu'"
     apt:
       name: ['apt-transport-https', 'curl', 'ca-certificates', 'gnupg-agent' ,'software-properties-common', 'kubelet=1.15.3-00', 'kubeadm=1.15.3-00', 'kubectl=1.15.3-00']
       state: present

   - name: Install kubernetes components for Ubuntu on EGX Stack 2.0
     become: true
     when: "ansible_distribution == 'Ubuntu' and egx_version == 2.0"
     apt:
       name: ['apt-transport-https', 'curl', 'ca-certificates', 'gnupg-agent' ,'software-properties-common', 'kubelet=1.17.5-00', 'kubeadm=1.17.5-00', 'kubectl=1.17.5-00']
       state: present

   - name: Install kubernetes components for Ubuntu on EGX Stack 3.1
     become: true
     when: "ansible_distribution == 'Ubuntu' and egx_version == 3.1"
     apt:
       name: ['apt-transport-https', 'curl', 'ca-certificates', 'gnupg-agent' ,'software-properties-common', 'kubelet=1.18.14-00', 'kubeadm=1.18.14-00', 'kubectl=1.18.14-00']
       state: present

   - name: Install kubernetes components for Ubuntu on EGX Stack 4.0 or 4.1
     become: true
     when: "egx_version == 4.0 or egx_version == 4.1 and ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
     apt:
       name: ['apt-transport-https', 'curl', 'ca-certificates', 'gnupg-agent' ,'software-properties-common', 'kubelet=1.21.1-00', 'kubeadm=1.21.1-00', 'kubectl=1.21.1-00']
       state: present

   - name: Install kubernetes components for Ubuntu on EGX Stack 4.2
     become: true
     when: "egx_version == 4.2 and ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
     apt:
       name: ['apt-transport-https', 'curl', 'ca-certificates', 'gnupg-agent' ,'software-properties-common', 'kubelet=1.21.7-00', 'kubeadm=1.21.7-00', 'kubectl=1.21.7-00']
       state: present

   - name: Hold the installed Packages
     become: true
     when: "ansible_distribution == 'Ubuntu'"
     dpkg_selections:
       name: "{{ item }}"
       selection: hold
     with_items:
      - kubelet
      - kubectl
      - kubeadm

   - name: Creating a Kubernetes repository file for RHEL/CentOS
     become: true
     when: "ansible_distribution in ['RedHat', 'CentOS']"
     file:
      path: /etc/yum.repos.d/kubernetes.repo
      state: touch

   - name: Adding repository details in Kubernetes repo file for RHEL/CentOS
     become: true
     when: "ansible_distribution in ['RedHat', 'CentOS'] and 'running' not in k8sup.stdout"
     blockinfile:
      path: /etc/yum.repos.d/kubernetes.repo
      block: |
       [kubernetes]
       name=Kubernetes
       baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
       enabled=1
       gpgcheck=0
       repo_gpgcheck=0
       gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
         https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

   - name: Installing required packages for RHEL/CentOS
     become: true
     when: "ansible_distribution in ['RedHat', 'CentOS'] and egx_version == 2.0"
     yum:
      name: ['bind-utils', 'yum-utils', 'device-mapper-persistent-data', 'lvm2', 'telnet', 'kubelet-1.17.5', 'kubeadm-1.17.5', 'kubectl-1.17.5', 'firewalld', 'curl']
      state: present

   - name: Validate whether Kubernetes cluster installed
     shell: kubectl cluster-info
     register: k8sup
     no_log: True
     failed_when: false

   - name: Add Docker GPG key for Ubuntu
     become: true
     when: "egx_version == 3.1 or egx_version == 1.3 and ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
     apt_key: url=https://download.docker.com/linux/ubuntu/gpg

   - name: Add Docker APT repository for Ubuntu
     become: true
     when: "egx_version == 3.1 or egx_version == 1.3 and ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
     apt_repository:
       repo: deb [arch=amd64] https://download.docker.com/linux/{{ansible_distribution|lower}} {{ansible_distribution_release}} stable

   - name: Install Docker-CE Engine for Ubuntu 20.04 on EGX Stack 3.1 or 1.3
     become: true
     ignore_errors: true
     when: "egx_version == 3.1 or egx_version == 1.3 and ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == '20' and 'running' not in k8sup.stdout"
     apt:
       name: [ 'docker-ce=5:19.03.13~3-0~ubuntu-focal' ]
       update_cache: yes

   - name: Install Docker-CE Engine for Ubuntu 18.04 on EGX Stack 3.1 or 1.3
     ignore_errors: true
     become: true
     when: "egx_version == 3.1 or egx_version == 1.3 and ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == '18' and 'running' not in k8sup.stdout"
     apt:
       name: [ 'docker-ce=5:19.03.13~3-0~ubuntu-bionic' ]
       update_cache: yes

   - name: Install Docker-CE Engine for Ubuntu on EGX Stack 2.0
     become: true
     when: "ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout and egx_version == 2.0"
     apt:
       name: [ 'docker-ce=5:19.03.5~3-0~ubuntu-bionic' ]
       update_cache: yes

   - name: Install Docker-CE Engine for Ubuntu on EGX Stack 1.2
     become: true
     when: "ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout and egx_version == 1.2"
     apt:
       name: [ 'docker-ce=5:19.03.1~3-0~ubuntu-bionic' ]
       update_cache: yes

   - name: "Configuring Docker-CE repo for RHEL/CentOS"
     become: true
     when: "ansible_distribution in ['RedHat', 'CentOS'] and 'running' not in k8sup.stdout"
     get_url:
       url: https://download.docker.com/linux/centos/docker-ce.repo
       dest: /etc/yum.repos.d/docker-ce.repo
       mode: 0644

   - name: Install Docker-CE Engine on RHEL/CentOS
     become: true
     when: "ansible_distribution in ['RedHat', 'CentOS'] and 'running' not in k8sup.stdout"
     args:
       warn: false
     shell: yum install docker -y

   - name: Adding Docker to Current User
     when: "ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
     become: true
     shell: |
       groupadd docker
       usermod -aG docker $USER

   - name: SetEnforce for RHEL/CentOS
     become: true
     when: "ansible_distribution in ['RedHat', 'CentOS'] and 'running' not in k8sup.stdout"
     ignore_errors: yes
     command: "setenforce 0"

   - name: SELinux for RHEL/CentOS
     become: true
     when: "ansible_distribution in ['RedHat', 'CentOS'] and 'running' not in k8sup.stdout"
     args:
       warn: false
     command: sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux

   - name: Enable Firewall Service for RHEL/CentOS
     become: true
     when: "ansible_distribution in ['RedHat', 'CentOS'] and 'running' not in k8sup.stdout"
     service:
       name: firewalld
       state: started
       enabled: yes
     ignore_errors: yes

   - name: Allow Network Ports in Firewalld for RHEL/CentOS
     become: true
     when: "ansible_distribution in ['RedHat', 'CentOS'] and 'running' not in k8sup.stdout"
     firewalld:
      port: "{{ item }}"
      state: enabled
      permanent: yes
      immediate: yes
     with_items:
       - "6443/tcp"
       - "10250/tcp"

   - name: Remove swapfile from /etc/fstab
     become: true
     when: "'running' not in k8sup.stdout"
     mount:
       name: "{{ item }}"
       fstype: swap
       state: absent
     with_items:
      - swap
      - none

   - name: Disable swap
     become: true
     when: "'running' not in k8sup.stdout"
     command: swapoff -a

   - name: Setup Containerd for Ubuntu 20.04
     when: "egx_version == 4.2 or egx_version == 4.0 or egx_version == 4.1 and ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == '20' and 'running' not in k8sup.stdout"
     become: true
     ignore_errors: true
     args:
       warn: false
     shell: " {{ item }}"
     with_items:
       - touch /etc/modules-load.d/containerd.conf
       - chmod 666 /etc/modules-load.d/containerd.conf
       - echo -e "overlay" >> /etc/modules-load.d/containerd.conf
       - echo -e "br_netfilter" >> /etc/modules-load.d/containerd.conf
       - modprobe overlay
       - modprobe br_netfilter
       - sysctl -w net.bridge.bridge-nf-call-ip6tables=1
       - sysctl -w net.bridge.bridge-nf-call-iptables=1
       - sysctl -w net.ipv4.ip_forward=1
       - sysctl --system
       - apt-get update && sudo apt-get install -y libseccomp2
       - mkdir -p /etc/containerd
       - touch /etc/default/kubelet
       - echo 'KUBELET_EXTRA_ARGS=--cgroup-driver=systemd --container-runtime=remote --container-runtime-endpoint="unix:/run/containerd/containerd.sock"' | sudo tee /etc/default/kubelet

   - name: Install Containerd for EGX DIY Stack 4.0
     become: true
     ignore_errors: true
     args:
       warn: false
     when: "egx_version == 4.0 and ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == '20' and 'running' not in k8sup.stdout"
     shell: " {{ item }}"
     with_items:
       - wget https://github.com/containerd/containerd/releases/download/v1.4.6/cri-containerd-cni-1.4.6-linux-amd64.tar.gz
       - sudo tar --no-overwrite-dir -C / -xzf cri-containerd-cni-1.4.6-linux-amd64.tar.gz
       - rm -rf cri-containerd-cni-1.4.6-linux-amd64.tar.gz
       - containerd config default | sudo tee /etc/containerd/config.toml
       - systemctl daemon-reload
       - systemctl restart containerd
   
   - name: Install Containerd for EGX DIY Stack 4.1 
     become: true
     ignore_errors: true
     args:
       warn: false
     when: "egx_version == 4.1 and ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == '20' and 'running' not in k8sup.stdout"
     shell: " {{ item }}"
     with_items:
       - wget https://github.com/containerd/containerd/releases/download/v1.5.0/cri-containerd-cni-1.5.0-linux-amd64.tar.gz
       - sudo tar --no-overwrite-dir -C / -xzf cri-containerd-cni-1.5.0-linux-amd64.tar.gz
       - rm -rf cri-containerd-cni-1.5.0-linux-amd64.tar.gz
       - containerd config default | sudo tee /etc/containerd/config.toml
       - systemctl daemon-reload
       - systemctl restart containerd

   - name: Install Containerd for EGX DIY Stack 4.2
     become: true
     ignore_errors: true
     args:
       warn: false
     when: " egx_version == 4.2 and ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == '20' and 'running' not in k8sup.stdout"
     shell: " {{ item }}"
     with_items:
       - wget https://github.com/containerd/containerd/releases/download/v1.5.8/cri-containerd-cni-1.5.8-linux-amd64.tar.gz
       - sudo tar --no-overwrite-dir -C / -xzf cri-containerd-cni-1.5.8-linux-amd64.tar.gz
       - rm -rf cri-containerd-cni-1.5.8-linux-amd64.tar.gz
       - containerd config default | sudo tee /etc/containerd/config.toml
       - systemctl daemon-reload
       - systemctl restart containerd


   - name: Starting and enabling the required services
     become: true
     when: "'running' not in k8sup.stdout"
     service:
      name: "{{ item }}"
      state: started
      enabled: yes
     failed_when: false
     with_items:
      - docker
      - kubelet
      - containerd

  handlers:
   - name: update-initramfs
     become: true
     command: update-initramfs -u
     when: ansible_os_family == "Debian" and nouveau_result.rc != 0
