- hosts: all
  gather_facts: yes
  vars_files:
    - cnc_values.yaml
  tasks:
    - name: Checking Nouveau is disabled
      become: true
      command: lsmod | grep nouveau
      register: nouveau_result
      failed_when: false

    - name: unload nouveau
      when: nouveau_result.rc != 0
      become: true
      modprobe:
        name: nouveau
        state: absent
      ignore_errors: true

    - name: blacklist nouveau
      when: nouveau_result.rc != 0
      become: true
      copy:
        dest: "/etc/modprobe.d/blacklist-nouveau.conf"
        owner: "root"
        group: "root"
        mode: "0644"
        content: |
          blacklist nouveau
          options nouveau modeset=0
      notify:
      - update-initramfs

    - name: Validate whether Kubernetes cluster installed
      shell: kubectl cluster-info
      register: k8sup
      no_log: True
      failed_when: false 

    - name: Add an Kubernetes apt signing key for Ubuntu
      become: true
      when: "ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
      apt_key:
        url: "{{ k8s_apt_key }}"
        state: present

    - name: Adding Kubernetes apt repository for Ubuntu
      become: true
      when: "ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
      apt_repository:
        repo: "{{ k8s_apt_repository }}"
        state: present
        filename: kubernetes


    - name: Install kubernetes components for Ubuntu on NVIDIA Cloud Native Core 5.0
      become: true
      when: "cnc_version == 5.0 and ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
      apt:
        name: ['apt-transport-https', 'curl', 'ca-certificates', 'gnupg-agent' ,'software-properties-common', 'kubelet=1.22.5-00', 'kubeadm=1.22.5-00', 'kubectl=1.22.5-00']
        state: present

    - name: Install kubernetes components for Ubuntu on NVIDIA Cloud Native Core 6.0
      become: true
      when: "cnc_version == 6.0 and ansible_distribution == 'Ubuntu' and 'running' not in k8sup.stdout"
      apt:
        name: ['apt-transport-https', 'curl', 'ca-certificates', 'gnupg-agent' ,'software-properties-common', 'kubelet=1.23.2-00', 'kubeadm=1.23.2-00', 'kubectl=1.23.2-00']
        state: present

    - name: Hold the installed Packages
      become: true
      when: "ansible_distribution == 'Ubuntu'"
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items:
        - kubelet
        - kubectl
        - kubeadm

    - name: Validate whether Kubernetes cluster installed
      shell: kubectl cluster-info
      register: k8sup
      no_log: True
      failed_when: false

    - name: Remove swapfile from /etc/fstab
      become: true
      when: "'running' not in k8sup.stdout"
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      become: true
      when: "'running' not in k8sup.stdout"
      command: swapoff -a

    - name: Setup Containerd for Ubuntu 20.04
      become: true
      block:
        - name: Create containerd.conf
          lineinfile:
            create: yes
            mode: 666
            path: /etc/modules-load.d/containerd.conf
            line: "{{ item }}"
          loop:
            - "overlay"
            - "br_netfilter"

        - name: Modprobe for overlay and br_netfilter
          modprobe:
            name: "{{ item }}"
            state: present
          ignore_errors: true
          loop:
          - "overlay"
          - "br_netfilter"

        - name: Add sysctl parameters to /etc/sysctl.conf
          sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            state: present
            reload: "{{ item.reload }}"
          loop:
            - {name: "net.bridge.bridge-nf-call-ip6tables", value: "1", reload: no}
            - {name: "net.bridge.bridge-nf-call-iptables", value: "1", reload: no}
            - {name: "net.ipv4.ip_forward", value: "1", reload: yes}
        
        - name: Install libseccomp2
          apt:
            name: libseccomp2
            state: present
            update_cache: yes
        
        - name: Create /etc/containerd
          file:
            path: /etc/containerd
            state: directory

        - name: Create /etc/default/kubelet
          lineinfile:
            line: KUBELET_EXTRA_ARGS=--cgroup-driver=systemd --container-runtime=remote --container-runtime-endpoint="unix:/run/containerd/containerd.sock"
            path: /etc/default/kubelet
            create: yes
      when: "cnc_version == 6.0 or cnc_version == 5.0 or cnc_version == 4.2 or cnc_version == 4.1 or cnc_version == 4.0 and ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == '20' and 'running' not in k8sup.stdout"

    - name: Install Containerd for NVIDIA Cloud Native Core 5.0
      become: true
      block:
        - name: Download cri-containerd-cni
          get_url:
            url: https://github.com/containerd/containerd/releases/download/v1.4.9/cri-containerd-cni-1.4.9-linux-amd64.tar.gz
            dest: /tmp/cri-containerd-cni-1.4.9-linux-amd64.tar.gz
            mode: 0664

        - name: Untar cri-containerd-cni
          unarchive:
            src: /tmp/cri-containerd-cni-1.4.9-linux-amd64.tar.gz
            dest: /
            remote_src: yes
            extra_opts:
              - --no-overwrite-dir
        
        - name: Get defaults from containerd
          command: containerd config default
          changed_when: false
          register: containerd_config_default

        - name: Write defaults to config.toml
          copy:
            dest: /etc/containerd/config.toml
            content: "{{ containerd_config_default.stdout }}"

        - name: restart containerd
          service:
            name: containerd
            state: restarted
            daemon_reload: yes
      when: "cnc_version == 5.0 and ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == '20' and 'running' not in k8sup.stdout"


    - name: Install Containerd for NVIDIA Cloud Native Core 6.0
      become: true
      block:
        - name: Download cri-containerd-cni
          get_url:
            url: https://github.com/containerd/containerd/releases/download/v1.6.0/cri-containerd-cni-1.6.0-linux-amd64.tar.gz
            dest: /tmp/cri-containerd-cni-1.6.0-linux-amd64.tar.gz
            mode: 0664

        - name: Untar cri-containerd-cni
          unarchive:
            src: /tmp/cri-containerd-cni-1.6.0-linux-amd64.tar.gz
            dest: /
            remote_src: yes
            extra_opts:
              - --no-overwrite-dir

        - name: Get defaults from containerd
          command: containerd config default
          changed_when: false
          register: containerd_config_default

        - name: Write defaults to config.toml
          copy:
            dest: /etc/containerd/config.toml
            content: "{{ containerd_config_default.stdout }}"

        - name: restart containerd
          service:
            name: containerd
            state: restarted
            daemon_reload: yes
      when: "cnc_version == 6.0 and ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == '20' and 'running' not in k8sup.stdout"

    - name: Starting and enabling the required services
      become: true
      when: "'running' not in k8sup.stdout"
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      failed_when: false
      with_items:
        - docker
        - kubelet
        - containerd

  handlers:
    - name: update-initramfs
      become: true
      command: update-initramfs -u
      when: ansible_os_family == "Debian" and nouveau_result.rc != 0
