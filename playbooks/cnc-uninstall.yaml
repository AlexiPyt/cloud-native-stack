- hosts: master
  gather_facts: yes
  vars_files:
    - cnc_values.yaml
  tasks:
  
   - name: Get Nvidia Tegra Release
     shell: uname -r | awk -F'-' '{print $2}'
     register: release

   - set_fact:
       release: "{{ release.stdout }}"
       
   - name: Uninstall the GPU Operator with MIG
     ignore_errors: true
     shell: |
       kubectl label nodes --all nvidia.com/mig.config=all-disabled --overwrite
       sleep 5
       config_state=$(kubectl describe nodes  |grep mig.config.state |head -n1 | awk -F'=' '{print $2}')
       while [ $config_state != "success" ]
       do
         sleep 5
         config_state=$(kubectl describe nodes  |grep mig.config.state | head -n1 |awk -F'=' '{print $2}')
       done
     when: "enable_mig == true and cnc_version >= 4.1 and release != 'tegra'"
     #failed_when: false
     async: 120
     args:
       executable: /bin/bash

   - name: Uninstall Helm Charts on NVIDIA Cloud Native Stack
     ignore_errors: true
     when:  release != 'tegra'
     async: 120
     shell: |
       count=$(helm ls -A | egrep 'gpu-operator|network-operator' | grep -v NAME | wc -l)
       if [[ $count > 0 ]]; then
        for name in `helm ls -A | awk '{print $1}' | grep -v NAME`
        do
          for namespace in `helm ls -A | grep $name |  awk '{print $2}' | grep -v NAMESPACE`
            do
              helm del $name -n $namespace --wait
              pods=$(kubectl get pods -n $namespace | grep -v NAME | wc -l)
              while [ $pods != 0 ]
              do
                sleep 10
                pods=$(kubectl get pods -n $namespace | grep -v NAME | wc -l)
              done
            done
        done
       fi
     args:
      executable: /bin/bash

- hosts: all
  gather_facts: yes
  become: true
  vars_files:
    - cnc_values.yaml
  tasks:

   - name: Reset Kubernetes component
     shell: "timeout 45 kubeadm reset --force"
     failed_when: false
     no_log: True

   - name: IPTables Cleanup
     ignore_errors: yes
     failed_when: false
     become: true
     shell: "{{ item }}"
     with_items: 
       - iptables -F
       - ip link delete cni0
       - ip link delete flannel.1

   - name: Remove Conatinerd and Kubernetes packages for Ubuntu
     when: "ansible_distribution == 'Ubuntu' and cnc_version >= 4.0"
     ignore_errors: yes
     apt:
       name: ['kubectl', 'kubeadm', 'kubelet', 'containerd', 'cri-o*', 'cri-o-runc*']
       state: absent
       purge: yes
       force: yes

   - name: Remove Docker and Kubernetes packages for Ubuntu
     when: "cnc_docker == true or cnc_version <= 3.1 and ansible_distribution == 'Ubuntu'"
     ignore_errors: yes
     apt:
       name: ['kubectl', 'kubeadm','kubelet', 'docker*', 'docker-ce*', 'containerd.io', 'nvidia-docker*']
       state: absent
       purge: yes
       force: yes

   - name: Remove NVIDIA Docker for Cloud Native Stack Developers
     when: "cnc_docker == true and ansible_distribution == 'Ubuntu' or cnc_nvidia_driver == true and ansible_distribution == 'Ubuntu'"
     ignore_errors: yes
     apt:
       name: ['cuda-drivers', ' nvidia-driver-*', 'nvidia-dkms-*', 'cuda','nvidia-container*']
       state: absent
       purge: yes
       force: yes

   - name: Remove dependencies that are no longer required
     when: "ansible_distribution == 'Ubuntu'"
     apt:
      autoremove: yes
      force: yes

   - name: Remove installed packages for RHEL/CentOS
     when:  "ansible_distribution in ['RedHat', 'CentOS']"
     ignore_errors: yes
     yum:
       name: ['kubectl', 'kubeadm','kubelet', 'docker*', 'cri*']
       state: absent

   - name: Cleanup Containerd Process
     shell: kill -9 $( ps -ef|grep containerd | awk '{print $2}')
     no_log: true
     failed_when: false
     ignore_errors: yes

   - name: NVIDIA FS Module Cleanup
     ignore_errors: yes
     failed_when: false
     become: true
     shell: rmmod nvidia_fs

   - name: Cleanup Directories for Cloud Native Stack Developers
     when: " cnc_docker == true or cnc_version <= 3.1 "
     ignore_errors: yes
     file:
       path: "{{ item }}"
       state: absent
     with_items:
        - /etc/docker
        - /var/lib/docker
        - /var/run/docker
        - /run/docker.sock
        - /run/docker
        - /usr/lib/nvidia
        - /usr/local/nvidia
        - /run/nvidia

   - name: Cleanup Directories
     ignore_errors: yes
     shell: rm -rf "{{ item }}"
     with_items:
        - /var/lib/containerd
#        - /run/containerd
        - /etc/containerd
        - /opt/containerd
        - /usr/local/sbin/runc
        - /usr/local/bin/crictl
        - /etc/crictl.yaml
        - /usr/local/bin/containerd
        - /usr/local/bin/containerd-s*
        - /var/lib/etcd
        - /etc/kubernetes
        - /usr/local/bin/helm
        - /var/lib/crio
        - /etc/crio
        - /usr/local/bin/crio
        - /var/log/containers
        - /etc/apt/sources.list.d/devel*
        - /etc/sysctl.d/99-kubernetes-cri.conf
        - /etc/modules-load.d/containerd.conf
        - /etc/modules-load.d/crio.conf
        - /etc/apt/trusted.gpg.d/libcontainers*
        - /etc/default/kubelet
        - /etc/cni/net.d
        - /etc/systemd/system/containerd.service.d/http-proxy.conf
        - /var/log/pods

   - name: Reboot the system
     when: "cnc_docker == true or cnc_nvidia_driver == true"
     reboot:
       reboot_timeout: 900